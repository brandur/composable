doctype 5

html
  head
    title= "Composable Apps With a First-class API"

    link href="/assets/application.css" media="screen" rel="stylesheet" type="text/css"
    /link href="http://fonts.googleapis.com/css?family=EB+Garamond|PT+Serif" rel="stylesheet" type="text/css"

  body.impress-not-supported
    #impress data-transition-duration="500"
      - x, y = 0, 0

      .step data-x="#{x}" data-y="#{y}" data-scale="2"
        .floating
          p
            | @brandur
          p
            img src="/assets/heroku-120.png"
          ul.presenter-notes
            li Explain Heroku

      .step data-x="#{x}" data-y="#{y += 2000}" data-scale="2"
        #title.floating
          h1 Post-Rails? Composable Applications with a First-class API

      .step data-x="#{x}" data-y="#{y += 2000}" data-scale="2"
        #title-2.floating
          h1
            span.redacted Post-Rails?
            |  Composable Applications with a First-class API
          ul.presenter-notes
            li Using app and service interchangeably here
          p.troll
            img src="/assets/trollface-200.png"
            br
            | Problem?

      .step#agenda data-x="#{x}" data-y="#{y += 2000}" data-scale="2"
        .floating
          h3 Agenda
          ol
            li
              a href="#a-tale-of-composition" A tale of composition
            li
              a href="#app-composition" App composition
            li
              a href="#lessons-learnt" Lessons learnt

      .step data-x="#{x}" data-y="#{y += 2000}" data-scale="2"
        #a-tale-of-composition.floating
          h2 A Tale of<br>Composition

      .step.slide data-x="#{x}" data-y="#{y += 600}"
        h3 Heroku's API Team
        ul
          li
            | If you've used the CLI, you've used the API
            pre
              | heroku list
            pre
              | GET https://api.heroku.com/apps
          li
            | Try it!
            pre
              | # you can your API key from ~/.netrc
                curl --user ":$API_KEY" -i https://api.heroku.com/apps

      .step data-x="#{x}" data-y="#{y += 850}"
        .floating
          p We were also <strong>in charge of this</strong>.
        #api-screenshot

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        #meet-core
          ul.presenter-notes
            li Our "monorail"
            li Wrap our heads around the entire app
          h3 Meet Core
          ul
            li A Rails app
            li Then, a <strong>BIG RAILS APP</strong>
            li Severe impact on development velocity and effort
          #growth-container
            .element-container
              #small-core
                img src="/assets/rails_100.png"
            .element-container
              #growth-arrow
                p
                  | &rarr;
            .element-container
              #small-core
                img src="/assets/rails_240.png"

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        h3 We broke things out.
        ul
          li Process management
          li Billing
          li Addons
          li Domain management
        pre
          |      |
                 V
                Core -----> Billing
                 |
                 V
                Core -----> Process Management
                 |
                 V
                Core

      .step.floating data-x="#{x}" data-y="#{y += 850}" data-scale="2"
        #butc
          h3 BUTC
          p <strong>B</strong>reak <strong>u</strong>p <strong>t</strong>he <strong>c</strong>ore

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        h3 Still too big
        ul
          li The goal is something small and agile
          li
            | Rails taught us to design an API like this:
            pre.language-ruby
              | responds_to do |format|
                  format.json { render :json => @apps }
                  format.html
                end
          li But we're an API, why should the web component get special treatment?

      .step data-x="#{x}" data-y="#{y += 850}"
        #introducing-dashboard.floating
          h3 Introducing Dashboard
        #dashboard-screenshot

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        h3 Dashboard Implementation
        ul
          li <strong>Rails</strong>
          li
            | <strong>Heroku.rb</strong>: the same backend that handles API calls for the CLI
            pre.language-ruby
              | # GET /apps
                def get_apps
                  request(
                    :expects  => 200,
                    :method   => :get,
                    :path     => "/apps"
                  )
                end

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        p API calls happen on the backend.
        pre.language-ruby
          | class AppsController < ApplicationController
              def index
                @apps = @api.get_apps
              end
            end

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        h3 Where's the fat client?
        ul
          li We enjoy the Ruby experience
          li
            | Puts all the elements in place for a fat client
            ul
              li Graceful degredation
          li
            | Backbone still recommends bootstrapped models
            pre.language-javascript
              | &lt;script&gt;
                  var Apps = new Backbone.Collection;
                  Apps.reset(<%= @apps.to_json %>);
                &lt;/script&gt;

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        #metrics
          h3 Metrics
          ul
            li
              | Dashboard
              ul
                li <span class="plus"><strong>+4500</strong></span> LOCs (3200 Ruby + 1300 templates)
            li
              | Core
              ul
                li 66k LOCs (61k Ruby + 5k templates)
                li Down to 55k LOCs (55k Ruby)
                li <span class="minus"><strong>-11k</strong></span> LOCs (<strong>~15%</strong>)

      .step data-x="#{x}" data-y="#{y += 850}"
        #equation.floating
          p Not the final win,<br>but one we'll take gladly.
          #equation-container
            .element-container
              #big
                img src="/assets/rails_240.png"
            .element-container
              #equals
                p
                  | =
            .element-container
              #small
                img src="/assets/rails_100.png"
            .element-container
              #plus
                p
                  | +
            .element-container
              #smaller
                img src="/assets/rails_180.png"

      .step data-x="#{x}" data-y="#{y += 850}"
        .floating
          p Our API is now an API.

      .step data-x="#{x}" data-y="#{y += 850}"
        #heroku-manager.floating
          h3 Heroku Manager
        #manager-screenshot

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        h3 Deeper Composition
        #deeper-composition
          #tier-container.diagram
            #tier1 Manager Web
            #tier2 Manager API
            #tier3 Core API
          ul
            li
              | Manager is further composed into two tiers
              ul
                li API
                li Web
            li Manager's API layer injects additional business logic built on underlying primitives: teams & organizations

      .step.slide data-x="#{x}" data-y="#{y += 850}"
        #reusable-api
          h3 A good API is a reusable API
          #tier-container.diagram
            #consumer Dashboard
            #consumer CLI
            #consumer Manager
            #api Core API
          ul
            li Core's API separately consumed by Dashboard, Manager, and the CLI

      .step#app-composition data-x="#{x += 1000}" data-y="#{y -= 800}" data-scale="4" data-rotate="-90"
        h2 App<br>Composition

      .step.slide data-x="#{x}" data-y="#{y -= 1600}" data-rotate="-90"
        #composability
          h3 Composability
          p
            span.layer ☁ <strong>API</strong><br>
            span.layer-consumers CLI, Dashboard, Manager API + developers
          p &darr;
          p
            span.layer ☁ <strong>Web</strong><br>
            span.layer-consumers Our web users

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Service oriented architecture
        ul.presenter-notes
          li SOA
          li Let's use a buzzword!
          li Users also benefit from these strong contracts
        ul
          li Loosely coupled components
          li Encourages strong contracts (they're a necessity)
          li Independent scaling of each service

      .step data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        #not-a-new-idea.floating
          p Not a new idea.
          p.publication Service-Oriented Architecture: Concepts, Technology, and Design
          p.year <sup>*</sup>2005
          ul.presenter-notes
            li Eight principles from industry
            li Published by Thomas Erl

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 First-class APIs
        ul.presenter-notes
          li All I mean by first-class is that it's not added as an afterthought or default, like in the responds_to block.
          li Why would you ever want to promote this? API is a critical factor the increasingly important mobile component
        ul
          li API design considered at least as much as web
          li Framework conducive to API development
          li Let's talk options

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Rails as frontend
        ul
          li
            | Great at interface
            ul
              li Template options
              li Asset pipeline
          li Maintenance of state through cookies + sessions
          li Security considerations: XSS/CSRF/etc.

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Rails as API
        ul.presenter-notes
          li We're not post-Rails, but we did move it up a layer
        ul
          li Helpers/views become less useful
          li ActiveRecord pretty good, but it's now decoupled
          li <code>ActiveRecord::Serialization#to_json</code> is a bad idea when strong contracts are important
          li
            | APIs are about verbs and nouns
            ul
              li A routing DSL is an unneeded layer of abstraction

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 <code>rails-api</code> as API
        ul.presenter-notes
          li Like everything in the Ruby world, there's a project for that
        pre
          | gem install rails-api
            rails-api new facts_api
        ul
          li Plugin by Yehuda Katz, José Valim, Carlos Antonio da Silva, and Santiago Pastorino
          li Originally in Rails core, but reverted
          li Selection of just the middleware needed for an API
          li Drops views, helpers, and assets
          li Familiarity

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Sinatra as API
        ul.presenter-notes
          li José Valim's InlineRoutes -- https://gist.github.com/3717973
          li For full stack control
        pre.language-ruby
          | get "/facts/:id" do |id|
              fact = Fact.first(id: id.to_i)
              [200, encode_json(fact)]
            end
            
            post "/facts" do
              fact = Fact.new(fact_params)
              fact.save
              [201, encode_json(fact)]
            end
        ul
          li The API's verbs and nouns are explicit
          li Beyond a trivial app, forces consideration of project structure
          li Use the exact Rack middleware stack you need

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Grape as API
        pre.language-ruby
          | class Facts::API < Grape::API
              version 'v0', using: :header
              
              resources :facts do
                get ":id" do
                  fact = Fact.first(id: params[:id].to_i)
                  encode_json(fact)
                end
              
                post do
                  fact = Fact.create(fact_params)
                  encode_json(fact)
                end
              end
            end
        ul
          li Patterns for versioning, parameter validation and coercion, and endpoint descriptions

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        #organization
          h3 Organization
          ul.presenter-notes
            li In many cases where a service was broken off, it was done by someone who cared about that portion, and that team member would go with it
          ul
            li
              | Smaller and more specialized teams
              ul
                li
                  | <strong>Before:</strong> three backend people, a designer, and a handful of frontend engineers
                  p.people
                    span.team
                      span.backend ⚥ ⚥ ⚥&nbsp
                      span.designer ⚥&nbsp;
                      span.frontend ⚥
                li
                  | <strong>After:</strong> API is three backend people; Dashboard is a designer and a frontend engineer
                  p.people
                    span.team
                      span.backend ⚥ ⚥ ⚥
                    span.arrow  &harr;&nbsp;
                    span.team
                      span.designer ⚥&nbsp;
                      span.frontend ⚥

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Happiness
        ul.presenter-notes
          li Frontend engineers not burdened by technical complexity of backend
          li Internal self-service means fewer people bothering each other
        ul
          li Designers and frontend people get to work on a thin web app
          li Same goes for the backend people
          li Internal self-service

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 And the best part?
        #misfloat
          p#backend-people Backend people<br>don't
          p#think-about-floats have to think<br>about CSS floats

      .step.slide data-x="#{x}" data-y="#{y -= 850}" data-rotate="-90"
        h3 Flexibility
        ul
          li Use an agnostic protocol (stay HTTP)
          li
            | Then use the right tool for the right job
            ul
              li Core API: <strong>Rails</strong>
              li Dashboard: <strong>Rails</strong>
              li Manager API: <strong>Scala</strong>
              li Manager Web: <strong>Sinatra + Backbone</strong>

      .step#lessons-learnt data-x="#{x += 1000}" data-y="#{y}" data-scale="2" data-rotate-y="45"
        h2 Lessons Learn(t/ing)

      .step.slide data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        h3 Stubs
        ul.presenter-notes
          li Do I have to set up ten different apps to get an app bootstrapped?
        ul
          li More pieces in the system make development and testing harder
          li You've just composed your apps to streamline your work; setup should also be streamlined

      .step.floating data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        h3 We started with this.
        ul.presenter-notes
          li This is not exactly what it looked like, but it's the right idea.
        p But we don't recommend it.
        pre.language-ruby
          | class AppsController < ApplicationController
              def index
                @apps = if production?
                  @api.get_apps
                else
                  []
                end
              end
            end

      .step.slide data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        h3 Artifice
        ul
          li Routes network calls to a Rack app
          li Yehuda Katz's <code>artifice</code> that does Net::HTTP; we're using <a href="https://github.com/brandur/excon-artifice"><code>excon-artifice</code></a>
          li Easy stubbing for test purposes
        pre.language-ruby
          | stub(Config).billing_api { "https://billing-api.localhost" }
            stub(Config).process_api { "https://process-api.localhost" }
            
            # stub with fully functional Rack apps
            Artifice::Excon.activate_for(Config.billing_api,
              BillingAPIStub.new)
            Artifice::Excon.activate_for(Config.process_api,
              ProcessAPIStub.new)

      .step.slide data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        h3 And you get Rack apps!
        pre.language-bash
          | web:         thin start -R config.ru -p $PORT
            billing_api: thin start -R stubs/billing_api.ru -p $PORT
            process_api: thin start -R stubs/process_api.ru -p $PORT
        p These apps are platform deployable.

      .step data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        .floating
          p Teams should own their own API stubs.
          ul.presenter-notes
            li This is one we're still thinking about
            li API change --> you could run against all known internal test suites
            li We're also thinking about how smart the stubs should be? A very dumb version of the service they're stubbing or the most basic stub possible.

      .step.slide data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        h3 Platform
        ul.presenter-notes
          li Takeaway: don't let ops team control design decisions because platform is hard
          li We deploy a lot of stuff to Heroku, but creating a new kernel app isn't too bad either
        ul
          li Creating a new app should be trivial
          li Pain to deploy a new app formation should be low
          li 
            | Easy reconfiguration
            ul
              li Web can point to a production API or a deployed stub

      .step data-x="#{x}" data-y="#{y += 850}" data-rotate-y="45"
        .floating
          p I know somebody that does all this.
          p
            img src="/assets/heroku-300.png"

      .step.floating data-x="#{x}" data-y="#{y += 850}" data-rotate="45" data-rotate-y="45"
        #about
          h3 @brandur
          p brandur@mutelight.org
          ul.notes
            li * <strong>Stunning</strong> effects by <a href="http://bartaz.github.com/impress.js">Impress.js</a>
            li * Powered by <strong>Heroku</strong>; <a href="https://github.com/brandur/composable">source code</a>

      .step#overview data-x="1000" data-y="15500" data-scale="9" data-rotate="-90"

    script src="/assets/application.js" type="text/javascript"
    javascript:
      impress().init()
